name: Build image and push in dockerhub
on:
  push:
    paths:
      - 'user-service/**'
      - 'product-service/**'
      - 'cart/**'
      - 'payment/**'

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      user_changed: ${{ steps.filter.outputs.user }}
      product_changed: ${{ steps.filter.outputs.product }}
      order_changed: ${{ steps.filter.outputs.order }}
      payment_changed: ${{ steps.filter.outputs.payment }}
    steps:
      - uses: actions/checkout@v3

      - name: Filter paths
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            user:
              - 'user-service/**'
            product:
              - 'product-service/**'
            order:
              - 'cart/**'
            payment:
              - 'payment/**'

  deploy:
    needs: filter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Docker Login
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # User Service Deploy
      - name: Deploy User Service
        if: needs.filter.outputs.user_changed == 'true'
        run: |
          echo "Deploying User Service..."
          cd user-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/userservice:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/userservice:latest

      # Product Service Deploy
      - name: Deploy Product Service
        if: needs.filter.outputs.product_changed == 'true'
        run: |
          echo "Deploying Product Service..."
          cd product-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecomproduct:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecomproduct:latest

      # Order Service Deploy
      - name: Deploy Order Service
        if: needs.filter.outputs.order_changed == 'true'
        run: |
          echo "Deploying Order Service..."
          cd cart
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecomcart:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecomcart:latest

      # Payment Service Deploy
      - name: Deploy Payment Service
        if: needs.filter.outputs.payment_changed == 'true'
        run: |
          echo "Deploying Payment Service..."
          cd payment
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecompayment:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/ecompayment:latest
  setup-bastion_host:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:                               
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Bastion host SSH key prepare
    - name: Setup SSH key
      run: |
        echo "${{ secrets.BASTION_SSH_KEY }}" > mainaccount.pem
        chmod 600 mainaccount.pem

    # (Optional) Configure AWS credentials if dynamic inventory needs it
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install Ansible with AWS support
      run: pip install "ansible[amazon]" boto3 botocore

    - name: Run Ansible Playbook
      run: |
         ansible-playbook ansible/check-playbook.yml \
         -i ansible/inventory/aws_ec2.yml \
         -u ubuntu --become \
         --private-key mainaccount.pem \
         --ssh-extra-args "-o StrictHostKeyChecking=no"
